export type { Observer, ObserverEvents } from 'mediasoup/node/src';
export type * from 'mediasoup/node/src/WorkerTypes';
export type * from 'mediasoup/node/src/WebRtcServerTypes';
export type * from 'mediasoup/node/src/RouterTypes';
export type * from 'mediasoup/node/src/TransportTypes';
export type * from 'mediasoup/node/src/WebRtcTransportTypes';
export type * from 'mediasoup/node/src/PlainTransportTypes';
export type * from 'mediasoup/node/src/PipeTransportTypes';
export type * from 'mediasoup/node/src/DirectTransportTypes';
export type * from 'mediasoup/node/src/ProducerTypes';
export type * from 'mediasoup/node/src/ConsumerTypes';
export type * from 'mediasoup/node/src/DataProducerTypes';
export type * from 'mediasoup/node/src/DataConsumerTypes';
export type * from 'mediasoup/node/src/RtpObserverTypes';
export type * from 'mediasoup/node/src/ActiveSpeakerObserverTypes';
export type * from 'mediasoup/node/src/AudioLevelObserverTypes';
export type * from 'mediasoup/node/src/rtpParametersTypes';
export type * from 'mediasoup/node/src/rtpStreamStatsTypes';
export type * from 'mediasoup/node/src/sctpParametersTypes';
export type * from 'mediasoup/node/src/srtpParametersTypes';
export type * from 'mediasoup/node/src/scalabilityModesTypes';
export * from 'mediasoup/node/src/errors';
type Only<T, U> = {
    [P in keyof T]: T[P];
} & {
    [P in keyof U]?: never;
};
export type Either<T, U> = Only<T, U> | Only<U, T>;
export type AppData = {
    [key: string]: unknown;
};
/**
 * Event listeners for mediasoup generated logs.
 */
export type LogEventListeners = {
    ondebug?: (namespace: string, log: string) => void;
    onwarn?: (namespace: string, log: string) => void;
    onerror?: (namespace: string, log: string, error?: Error) => void;
};
//# sourceMappingURL=types.d.ts.map